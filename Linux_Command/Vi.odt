A Gentle Introduction To vi


The first version of vi was written in 1976 by Bill Joy.
vi derives its name from the word “visual”, because it was intended to allow editing on a video terminal with a moving cursor.
vi actually incorporates a powerful line editor called ex, and we can use line editing commands while using vi.

Most Linux distributions don't include real vi; rather they ship with vim “vi improved” written by Bram Moolenaar.

vim is a substantial improvement over traditional Unix vi and is usually symbolically linked (or aliased) to the name vi on Linux systems.

** To install full version Vi:

    sudo apt-get remove vim-tiny
    sudo apt-get install vim

vi
Start vi
:q
To exit
:q!
Forced exit

TIP: if you get lost in vi, try pressing th Esc key twice to find your way again.

vi foo.txt
Create a file named foo.txt

The leading ~ indicate that no text exists on that line.

vi is a modal editor. When it starts up, it begins in command mode. In this mode, almost every key is a command, so if we were to start typing, vi would basically go crazy and make a big mess.


	Insert Mode:
In order to add some text to our file, we must first enter insert mode.
We press “i” key. Afterwards, we should see
-- INSERT -- 

To exit insert mode and return to command mode, press the Esc key.

	Saving Work:
To save the change made to a file, we must enter an ex command while in command mode. Pressing ':' key.

**In the vim documentation, command mode is called normal mode and ex commands are called command mode.

To write the modified file:
    :w
You will get a confirmation message at the bottom of the screen.



    Moving the Cursor Around:

Key
Moves the Cursor
l or → 
Right one character
h or ← 
Left one character
j or down arrow
Down one line
K or up arrow
Up one line
0
To the beginning of the current line
^
To the first non-whitespace character on the current line
$
To the end of the current line
w
To the beginning of the next word or punctuation character
W
To the beginning of the next word, ignoring punctuation characters
b 
To the beginning of the previous word or punctuation character
B
To the beginning of the previous word, ignoring punctuation characters
Ctrl-f or page down
Down one page
Ctrl-b or page up
Up one page
NumberG
To line number
G
To the last line of the file


By prefixing a command with a number, we may specify the number of times a command is to be carried out.


To undo, we press 'u' while in command mode.
To redo, we press 'ctrl+u' while in command mode.

    Appending Text:
To append text to a written file, we press 'a' while in command mode.
Pressing 'A' will move the cursor to the end of the current line and start appending.

    Opening a Line:
To insert a blank line between two existing lines and enter insert mode:
'o' → The line below the current line
'O' → The line above the current line

    Deleting Text:

Command
Deletes
x
The current Character
dd 
The current line
dW
From the current cursor position to the beginning of the next word
d$
From the current cursor location to the end of the current line
d0 
From the current cursor location to the beginning of the line
d^ 
From the current cursor location to the first non-whitespace character in the line
dG 
From the current line to the end of the file


    Cutting, Copying and Pasting Text:
Each time we use the d command the deletion is copied into a paste buffer that we can later recall:
'p' → paste the contents of the buffer after the cursor
'P' → paste the contents before the cursor

the 'y' command is used to “yank” (copy) text in much the same way the d command is used to cut text.


Command
Copies
yd 
The current line
yW
From the current cursor position to the beginning of the next word
y$
From the current cursor location to the end of the current line
y0 
From the current cursor location to the beginning of the line
y^ 
From the current cursor location to the first non-whitespace character in the line
yG 
From the current line to the end of the file


    Joining Lines:
It is not possible to move the cursor to the end of a line and delete the end-of-line character to join one line with the one below it.
To do so, use the 'J' command.


    Search and Replace:
vi has the ability to move the cursor to locations based on searches.
It can also perform text replacements with or without confirmation from the user.

*Searching Within a Line:
The 'f' command searchers a line and moves to the next instance of a specified character.
The search can be repeated by typing a semicolon.

*Searching the Entire File:
When you type '/', it will appear at the bottom of the screen, followed by the pattern that you are looking for.
The cursor will move to the next location containing the search string.
The search can be repeated by typing 'n' command.

*Global Search and Replace:
To perform search and replace operations (substitution in vi) over a range of lines or the entire file, we must use a combinations of the following items:


Item
Meaning
:
The colon character starts an ex command
%
Specifies the range of lines for the operation. % is a shortcut meaning from the first line to the last line.
The range can be specified as “a,b”.
If the range of lines is omitted, the operation is performed on the current line.
/pText/nText
The search pattern and replacement text.
g
This means “global” in the sense that the search and replace is performed on every instance of the search string in the line.
If omitted, only the first instance of the search string on each line is replaced.
c
The option is added at the end of the command, so we can have user confirmation.

User confirmation will allows these option:

Key
Action
y
Perform the substitution
n 
Skip this instance of the pattern
a 
Perform the substitution on this and all subsequent instances of the pattern.
q or Esc
Quit substituting
l 
Perform this substitution and then quit. “Last”
Ctrl-e, Ctrl-y 
Scroll down, or up, respectively. Useful for viewing the context of the proposed substitution.


    Editing Multiple Files:
With vi we can open multiple files for editing by specifying them on the command line:

    vi file1 file2 file3 …

** We can save and exit the file in same time: :wq or ZZ
** To save as → :w new_file_path

    Switching Between Files:
After opening multiple files, we can switch between them by:
    
    :n → move to the next file
    :N → move the previous file

vi enforces a policy that prevents us from switching files if the current file has unsaved changes. But you can force it by appending '!'.

vi provides some ex commands that make multiple files easier to manage.
We can view a list of files being edited with the “:buffers” command. Doing so will display a list of the files at the bottom of the display.

To switch to another buffer (file), type :buffer followed by the number of the buffer you wish to edit.


    Opening Additional Files For Editing:
It's possible to add files to the current editing session.
:e file_path (short for edit)


    Insert a File:
To insert the content of file in a current open file, we use the ex command
:r file_path (short for read)



Further reading:
https://en.wikibooks.org/wiki/Learning_the_vi_Editor
